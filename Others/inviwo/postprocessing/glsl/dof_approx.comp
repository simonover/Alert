/*********************************************************************************
 *
 * Inviwo - Interactive Visualization Workshop
 *
 * Copyright (c) 2019-2020 Inviwo Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *********************************************************************************/

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform sampler2D inportColor;
uniform sampler2D inportDepth;
uniform sampler2D haltonColor;

uniform float nearClip;
uniform float farClip;
uniform int evalCount;
uniform float aperture;
uniform int nViews;
uniform int nSimViews;
uniform float fovy;
uniform float focusDepth;
uniform vec2 dim;
uniform vec2 cameraPos;
uniform int segmentStart;

writeonly layout (binding = 0, rgba32f) uniform image3D lightField;
layout (binding = 1, r32f) uniform image3D lightFieldDepth;

void main() {
    vec2 screenPos = gl_GlobalInvocationID.xy;
    vec4 color = texelFetch(inportColor, ivec2(screenPos), 0);
    float zNdc = texelFetch(inportDepth, ivec2(screenPos), 0).r;
    float zWorld = nearClip * farClip / (zNdc * (nearClip - farClip) + farClip);

    imageStore(lightField, ivec3(screenPos, evalCount), color);
    imageStore(lightFieldDepth, ivec3(screenPos, evalCount), vec4(zWorld,0,0,0));

    // Calculate position of simulated view.
    int viewIndex = int(gl_GlobalInvocationID.z) + segmentStart;
    float radius = aperture / 2.0 * sqrt(texelFetch(haltonColor, ivec2(viewIndex, 0), 0).r);
    float angle = float(viewIndex - 1) / float(nSimViews) * 2.0 * 3.1415926538;
    vec2 simCameraPos = radius * vec2(cos(angle), sin(angle));

    // Warp to simulated view.
    vec2 disparity = (1.0 / zWorld - 1.0 / focusDepth) * (cameraPos - simCameraPos);
    vec2 simScreenPos = screenPos + disparity * dim.y / (2.0 * tan(fovy / 2.0));
    ivec3 pos = ivec3(round(simScreenPos.x), round(simScreenPos.y), viewIndex + nViews);
    float currDepth = imageLoad(lightFieldDepth, pos).r;

    // Awkward nested conditional because it didn't compile with && (Nvidia 2070S).
    if (currDepth > 0) {
        if (currDepth < zWorld) {
            return;
        }
    }

    imageStore(lightField, pos, color);
    imageStore(lightFieldDepth, pos, vec4(zWorld,0,0,0));
}
