/*********************************************************************************
 *
 * Inviwo - Interactive Visualization Workshop
 *
 * Copyright (c) 2019-2020 Inviwo Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *********************************************************************************/
 
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#include "utils/classification.glsl" 
#include "utils/advection.glsl"

#ifndef NUM_ADVECTIONS
#define NUM_ADVECTIONS 1
#endif


uniform float dt;
uniform float advectionSpeed;
uniform sampler3D velocityField;

uniform float minV;
uniform float maxV;

uniform float minR;
uniform float maxR;

uniform sampler2D tf;

uniform mat4 toTextureMatrix;

layout(std430, binding = 0) buffer posBuffer { vec4 pos[]; };
layout(std430, binding = 1) buffer lifeBuffer { float life[]; };
layout(std430, binding = 2) buffer radiBuffer { float radius[]; };
layout(std430, binding = 3) buffer colBuffer { vec4 col[]; };


bool inside(vec3 texCoord) {
    if (any(lessThan(texCoord, vec3(0.0f)))) return false;
    if (any(greaterThan(texCoord, vec3(1.0f)))) return false;
    return true;
} 

vec3 toTexture(vec3 p) {
    vec4 P = toTextureMatrix * vec4(p, 1);
    return P.xyz / P.w;
}

vec3 sampleVelocity(vec3 worldPos) {
    vec3 tex = toTexture(worldPos);
    if (!inside(tex)) return vec3(0);
    return texture(velocityField, tex).xyz;
} 


void main() {
    uint gid = gl_GlobalInvocationID.x;
    vec3 p = pos[gid].xyz;

    for (int i = 0; i < NUM_ADVECTIONS; i++) { 
        p = advectRK4(p, advectionSpeed * dt); 
    }

    float v = length(sampleVelocity(p));
    v = clamp((v - minV) / (maxV - minV), 0.0, 1.0);

    if (v < 0.001) {
        life[gid] -= 0.5 * dt;  // die in 0.5 seconds if stale
    }

    col[gid] = applyTF(tf, v);
    radius[gid] = mix(0, mix(minR, maxR, v), life[gid] > 0);
    pos[gid] = vec4(p, 1);
}
