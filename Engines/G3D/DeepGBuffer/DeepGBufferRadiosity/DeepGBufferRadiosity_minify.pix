#version 150// -*- c++ -*-
#extension GL_EXT_gpu_shader4 : require
#extension GL_ARB_explicit_attrib_location : enable


#if __VERSION__ == 120
#   define textureSize  textureSize2D
#endif

/**
 \file AmbientOcclusion_minify.pix
 \author Morgan McGuire and Michael Mara, NVIDIA Research
 
  Open Source under the "BSD" license: http://www.opensource.org/licenses/bsd-license.php

  Copyright (c) 2011-2012, NVIDIA
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  */
uniform int       previousMIPNumber;  

uniform sampler2D CS_Z_buffer;
uniform sampler2D colorBuffer;
uniform sampler2D normal_buffer;

#define color gl_FragData[0].rgb
#define normal gl_FragData[1].rgba
#if  HAS_PEELED_BUFFER
#   define csz gl_FragData[2].rg
#   else
#   define csz gl_FragData[2].r
#endif
#if  HAS_PEELED_BUFFER
    uniform sampler2D peeledColorBuffer;
    uniform sampler2D peeledNormalBuffer;

#   define peeledColor gl_FragData[3].rgb
#   define peeledNormal gl_FragData[4].rgb
#endif



void main() {
    ivec2 ssP = ivec2(gl_FragCoord.xy);

    ivec2 coordinate = clamp(ssP * 2 + ivec2(ssP.y & 1, ssP.x & 1), ivec2(0), textureSize(CS_Z_buffer, previousMIPNumber) - ivec2(1));
    // Rotated grid subsampling to avoid XY directional bias or Z precision bias while downsampling.
    // On DX9, the bit-and can be implemented with floating-point modulo
    
    vec3 colorResult = texelFetch(colorBuffer, coordinate, previousMIPNumber).rgb;

    normal = texelFetch(normal_buffer, coordinate, previousMIPNumber).rgba;
    color  = colorResult;
#   if  HAS_PEELED_BUFFER
        csz = texelFetch(CS_Z_buffer, coordinate, previousMIPNumber).rg;
#   else
        csz = texelFetch(CS_Z_buffer, coordinate, previousMIPNumber).r;
#   endif
#   if  HAS_PEELED_BUFFER
#       if !USE_OCT16
            peeledNormal = texelFetch(peeledNormalBuffer, coordinate, previousMIPNumber).rgb;
#       endif
        peeledColor = texelFetch(peeledColorBuffer, coordinate, previousMIPNumber).rgb;  
#   endif
}
