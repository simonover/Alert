#version 410
/**
  \file data-files/shader/PointSurface/PointSurface_gbuffer.pix

  This shader expects a prefix (GBuffer::macros() or SVO::macros()) to be attached
  at runtime using Shader::setPremable.

  G3D Innovation Engine http://casual-effects.com/g3d
  Copyright 2000-2019, Morgan McGuire
  All rights reserved
  Available under the BSD License
*/

// csPosition and wsPosition are always at the center of the point ball.

// Needed to make UniversalMaterial_sample reject zero-coverage (or partial coverage)
// pixels
#define UNBLENDED_PASS 1

#include <compatibility.glsl>
#include <UniversalMaterial/UniversalMaterial_writeToGBuffer.glsl>
#include <AlphaFilter.glsl>

#expect RENDER_AS_DISK

#define HAS_ALPHA 0
#define HAS_EMISSIVE 1
#define HAS_TRANSMISSIVE 0
#define ALPHA_HINT AlphaHint_ONE
#define HAS_NORMAL_BUMP_MAP 0
#define PARALLAXSTEPS 0

in Radiance3            pointEmission;

/** Do not read color attributes (except LAMBERTIAN, if an alpha test is required)
    outside of this rectangle.  Used to implement the trim band outside of which
    only depth is recorded. */
uniform vec2            lowerCoord, upperCoord;

#if defined(SS_POSITION_CHANGE) || defined(SS_EXPRESSIVE_MOTION)
    // We reproject per-pixel so that csPrevPosition can be interpolated
    // linearly in the current frame's 3D; projecting the previous position
    // in the vertex shader would result in a previous homogeneous value
    // being linearly in the current time frame.
    uniform mat4 ProjectToScreenMatrix;
#else
    mat4 ProjectToScreenMatrix;
#endif

float backside = (gl_FrontFacing == g3d_InvertY) ?  1.0 : -1.0;

#if (USE_DEPTH_PEEL != 0)
#   include <depthPeel.glsl>

    /** Need not be at the same resolution as the current depth buffer. 
        For samples to be written, they must be at greater gl_FragCoord.z values
        than those in this buffer.*/
    uniform sampler2D previousDepthBuffer;

    /**
     textureSize(previousDepthBuffer) / textureSize(currentDepthBuffer)
     */
    uniform float2    currentToPreviousScale;

    /** Minimum depth buffer value distance (on [0,1]) that new faces 
        must be beyond previousDepthBuffer to be written. */
    uniform float     minZSeparation;

    uniform float3    clipInfo;
#endif

    
/** Texture coordinate */
layout(location=0) in vec2 texCoord;

layout(location=1) in vec3 wsPosition;

#if defined(CS_POSITION_CHANGE) || defined(SS_POSITION_CHANGE)
    layout(location=7) in vec3 csPrevPosition;
#else
    Point3 csPrevPosition;
#endif

#if defined(SS_EXPRESSIVE_MOTION)
    layout(location=8) in vec3 csExpressivePrevPosition;
#else
    Point3 csExpressivePrevPosition;
#endif
    
layout(location=10) in vec4         vertexColor;

#ifdef SVO_POSITION
#   error PointSurface does not support SVO_POSITION
#endif

void main() {
#   if (USE_DEPTH_PEEL != 0)
        if (isDepthPeeled(previousDepthBuffer, currentToPreviousScale, minZSeparation, gl_FragCoord.xyz, clipInfo)) {
            // We have to discard here to avoid writing to z, even though it causes us to lose early z tests on 2013-era hardware
            discard;
        }
#   endif

    // Check the color rect bounds
    if ((gl_FragCoord.x < lowerCoord.x) ||
        (gl_FragCoord.y < lowerCoord.y) ||
        (gl_FragCoord.x > upperCoord.x) ||
        (gl_FragCoord.y > upperCoord.y)) {
        // Outside of bounds, in the guard band. Perform a fast, non-parallax alpha test if required.           
        // Don't bother looking up attributes, just let the depth write straight through 
        return;
    }
    
#   if RENDER_AS_DISK
    {
        Point2 coord = gl_PointCoord - Point2(0.5);  // from [0, 1] to [-0.5, 0.5]
        // Slightly rounded rectangle
        if (dot(coord, coord) > 0.65 * 0.5) {
            // outside of disk radius
            discard;
        }
    }
#   endif
    //////////////////////// MATERIAL //////////////////////////////

    UniversalMaterialSample materialSample;

    materialSample.lambertianReflectivity = Color3(0);
    materialSample.coverage = 1.0f;
    materialSample.fresnelReflectionAtNormalIncidence = Color3(0);
    materialSample.smoothness = 0.0f;
    materialSample.transmissionCoefficient = Color3(0);
    materialSample.collimation = 1.0f;
    materialSample.offsetTexCoord = Point2(0);
    materialSample.emissive = pointEmission;
    materialSample.lightMapRadiance = Radiance3(0);
    materialSample.geometricNormal = Vector3(0,1,0);
    materialSample.shadingNormal = Vector3(0,1,0);
    materialSample.glossyShadingNormal = Vector3(0,1,0);
    materialSample.tsNormal = Vector3(1,0,0);
    materialSample.position = wsPosition;
       
    writeToGBuffer(materialSample, ProjectToScreenMatrix, csPrevPosition, csExpressivePrevPosition);
}
